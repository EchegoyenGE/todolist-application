{"version":3,"sources":["components/TaskItem.js","components/TaskList.js","components/FolderItem.js","components/FolderList.js","components/EditForm.js","components/CreateFolderForm.js","components/Notification.js","services/tasks.js","services/folders.js","App.js","index.js"],"names":["TaskItem","task","handleDoneChange","handleChangeShowEdit","handleRemoveTask","className","type","checked","done","onChange","taskName","Button","variant","color","onClick","TaskList","tasks","addNewTask","newTask","handleNewTaskChange","map","idTask","onSubmit","TextField","id","label","value","placeholder","FolderItem","folder","handleShowFolderTasks","handleRemoveFolder","name","FolderList","allFolders","idFolder","EditForm","handleEdit","handleChangeEditedTask","taskEdited","handleCancelEdit","useState","CreateFolderForm","newFolder","handleCreateFolder","handleChangeNewFolder","Notification","message","BASE_URL","axios","get","then","response","data","put","post","delete","updatedTask","nFolder","App","setTasks","setNewTask","setAllFolders","currentFolder","setCurrentFolder","setNewFolder","currentTask","setCurrentTask","setTaskEdited","showEdit","setShowEdit","errorMessage","setErrorMessage","useEffect","tasksService","initialTasks","foldersService","initialFolders","callError","setTimeout","handleDisplayAllFolders","tasksToShow","filter","window","confirm","deletedFolder","f","e","preventDefault","target","console","log","validation","t","toLowerCase","indexOf","content","taskUpdated","taskToAdd","deletedTask","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cef747f7.chunk.js","sourcesContent":["import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function TaskItem ({task, handleDoneChange, handleChangeShowEdit, handleRemoveTask}) {\r\n    return (\r\n      <li className=\"list-item\">\r\n        <div className=\"cb-list-row-item\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"task-checkbox\"\r\n            checked={task.done}\r\n            onChange={() => handleDoneChange(task)}\r\n          />\r\n        </div>\r\n        <div className=\"name-list-row-item\">\r\n          {task.taskName}\r\n        </div>\r\n        <div className=\"list-row-item\">\r\n          <Button variant=\"outlined\" color=\"primary\" className=\"task-edit\" onClick={() => handleChangeShowEdit(task)}>Edit</Button>\r\n        </div>\r\n        <div className=\"list-row-item\">\r\n          <Button variant=\"outlined\" color=\"secondary\" className=\"task-remove\" onClick={() => handleRemoveTask(task)} >Remove</Button>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n  ","import React from 'react'\r\nimport {Button, TextField} from '@material-ui/core'\r\nimport TaskItem from './TaskItem'\r\n\r\nexport default function TaskList({\r\n    tasks,\r\n    addNewTask,\r\n    newTask,\r\n    handleDoneChange,\r\n    handleNewTaskChange,\r\n    handleChangeShowEdit,\r\n    handleRemoveTask }) {\r\n    \r\n    return (\r\n      <>\r\n        <div className=\"task-list-title-div\">\r\n          <h4 className=\"task-list-title\">\r\n            To-Do List\r\n          </h4>\r\n        </div>\r\n        <ul className=\"task-list\">\r\n            {\r\n            tasks.map(task => <TaskItem\r\n              key={task.idTask}\r\n              task={task}\r\n              handleDoneChange={handleDoneChange}\r\n              handleChangeShowEdit={handleChangeShowEdit}\r\n              handleRemoveTask={handleRemoveTask}/>)\r\n            }\r\n        </ul>\r\n        <div className=\"create-task-form\">\r\n          <div><h4 className=\"task-label\">Create task</h4></div>\r\n          <form onSubmit={addNewTask} className=\"task-form\">\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"New task\"\r\n              type=\"text\"\r\n              value={newTask}\r\n              onChange={handleNewTaskChange}\r\n              placeholder=\"New task\"\r\n              className=\"task-form-input\"\r\n            />\r\n            <Button type='submit' variant=\"contained\" color=\"primary\" className=\"btn-add-folder\">Add</Button>  \r\n          </form>\r\n        </div>\r\n      </>\r\n    )\r\n  }","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function FolderItem ({folder, handleShowFolderTasks, handleRemoveFolder}){\r\n    return (\r\n        <li className=\"folder-item\">\r\n          <div className=\"list-row-item\">\r\n          {folder.name}\r\n          </div>\r\n          <div className=\"list-row-item\">\r\n            <Button variant=\"outlined\" color=\"primary\"className=\"item-view\" onClick={() => handleShowFolderTasks(folder)}>View Items</Button>\r\n          </div>\r\n          <div className=\"list-row-item\">\r\n            <Button variant=\"outlined\" color=\"secondary\" className=\"item-remove\" onClick={() => handleRemoveFolder(folder)}>Remove</Button>\r\n          </div>  \r\n        </li>\r\n      )\r\n}","import React from 'react'\r\nimport FolderItem from './FolderItem'\r\n\r\n\r\nexport default function FolderList({\r\n    allFolders,\r\n    handleShowFolderTasks,\r\n    handleRemoveFolder }){    \r\n    return (\r\n        <>\r\n            <ul className=\"folder-list\">\r\n                {\r\n                    allFolders.map(folder => <FolderItem\r\n                        key={folder.idFolder}\r\n                        folder={folder}\r\n                        handleShowFolderTasks={handleShowFolderTasks}\r\n                        handleRemoveFolder={handleRemoveFolder}/>)\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n  }","import React, { useState } from 'react'\r\nimport {Button, TextField} from '@material-ui/core'\r\n\r\nexport default function EditForm({ handleEdit, handleChangeEditedTask, taskEdited, handleCancelEdit }) {\r\n  \r\n  const [task] = useState(taskEdited)\r\n\r\n  return (\r\n    <>\r\n      <div className=\"edit\">\r\n        <div className=\"edit-title\">\r\n          <h4 className=\"edit-label\">\r\n            Editing task \"{task}\"\r\n          </h4>\r\n        </div>\r\n        <form className=\"edit-form\" onSubmit={handleEdit}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            label={task}\r\n            type='text'\r\n            onChange={handleChangeEditedTask}\r\n            value={taskEdited}\r\n            className=\"edit-item\"/>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type='submit'\r\n            className=\"edit-item\">\r\n            Save\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"button\"\r\n            className=\"edit-item\"\r\n            onClick={handleCancelEdit}>\r\n            Cancel\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport { Button, TextField } from '@material-ui/core'\r\n\r\nexport default function CreateFolderForm ({newFolder, handleCreateFolder, handleChangeNewFolder}) {\r\n    return (\r\n      <div className=\"create-folder-form\">\r\n          <br/>\r\n          <div className=\"create-folder-form-label\"><h4 className=\"folder-label\">Create folder</h4></div>\r\n          <form onSubmit={handleCreateFolder} className=\"folder-form\">\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            label=\"New folder\"\r\n            type='text'\r\n            onChange={handleChangeNewFolder}\r\n            value={newFolder}\r\n            placeholder=\"New folder\"\r\n            className=\"folder-form-input\"/>\r\n            <Button type='submit' variant=\"contained\" color=\"primary\" className=\"btn-add-folder\">Add</Button>\r\n          </form>\r\n      </div> \r\n    )\r\n  }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === '') {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst BASE_URL = '/api/tasks'\r\n\r\nconst getAllTasks = () => {\r\n    const request = axios.get(`${BASE_URL}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst toggleDone = (idTask) => {\r\n    const request = axios.put(`${BASE_URL}/${idTask}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst addNew = (newTask) => {\r\n    const request = axios.post(`${BASE_URL}`, newTask)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst removeTask = (idTask) => {\r\n    const request = axios.delete(`${BASE_URL}/${idTask}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updateTaskName = (idTask, updatedTask) => {\r\n    const request = axios.put(`${BASE_URL}/${idTask}`, updatedTask)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAllTasks,\r\n    toggleDone,\r\n    addNew,\r\n    removeTask,\r\n    updateTaskName\r\n}\r\n","import axios from 'axios'\r\nconst BASE_URL = '/api/folders'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(`${BASE_URL}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst removeFolder = (idFolder) => {\r\n    const request = axios.delete(`${BASE_URL}/${idFolder}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (nFolder) => {\r\n    const request = axios.post(`${BASE_URL}`, nFolder)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    removeFolder,\r\n    create\r\n}\r\n","import React, { useEffect, useState } from 'react'\n\nimport TaskList from './components/TaskList'\nimport FolderList from './components/FolderList'\nimport EditForm from './components/EditForm'\nimport CreateFolderForm from './components/CreateFolderForm'\nimport Notification from './components/Notification'\n\nimport tasksService from './services/tasks'\nimport foldersService from './services/folders'\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([])\n  const [newTask, setNewTask] = useState('')\n  \n  const [allFolders, setAllFolders] = useState([])\n  const [currentFolder, setCurrentFolder] = useState(null)\n  const [newFolder, setNewFolder] = useState('')\n\n  const [currentTask, setCurrentTask] = useState(null)\n  const [taskEdited, setTaskEdited] = useState('')\n  const [showEdit, setShowEdit] = useState(false)\n\n  const [errorMessage, setErrorMessage] = useState('')\n\n  useEffect(() => {\n    tasksService\n      .getAllTasks()\n      .then(initialTasks => {\n        setTasks(initialTasks)\n      })\n\n    foldersService\n      .getAll()\n      .then(initialFolders => {\n        setAllFolders(initialFolders)\n      })\n  }, [])\n\n  const handleDoneChange = (task) => {\n    tasksService\n      .toggleDone(task.idTask)\n      .then(response => {\n        setTasks(tasks.map(data => {\n          if (task.idTask === data.idTask) {\n            task.done = !task.done\n          }\n          return data\n        }))\n      })\n  }\n\n  const handleNewTaskChange = ({ target }) => {\n    setNewTask(target.value)\n    console.log(target.value)\n  }\n\n  const callError = (message) => {\n      setErrorMessage(message)\n      setTimeout(() => {\n        setErrorMessage('')\n      }, 1500)\n  } \n\n  const addNewTask = (e) => {\n    e.preventDefault()\n\n    if (newTask === '') {\n      callError('The task is empty')\n      return\n    }\n    \n    const names = tasksToShow.map(t => t.taskName.toLowerCase())\n\n    let validation = true\n    if (names.indexOf(newTask.toLowerCase()) >= 0) {\n      validation = window.confirm('This task already exists, continue?')\n    }\n    \n    if (!validation) {\n      return\n    }\n\n    const taskToAdd = {\n      taskName: newTask,\n      idFolder: currentFolder.idFolder\n    }\n\n    tasksService\n      .addNew(taskToAdd)\n      .then(data => {\n        setTasks([...tasks, data])\n    })    \n    setNewTask('')\n  }\n\n  const handleShowFolderTasks = ({ name, idFolder }) => {\n    const curFolder = {name, idFolder}\n    setCurrentFolder(curFolder)\n  }\n\n  const handleRemoveTask = (task) => {\n\n    let validation = window.confirm('Are you sure you want to delete this task?')\n\n    if (!validation) {\n      return\n    }\n\n    tasksService\n      .removeTask(task.idTask)\n      .then((deletedTask) => {\n        setTasks(tasks.filter(t => t.idTask !== task.idTask))\n      })\n  }\n\n  const handleDisplayAllFolders = () => {\n    setCurrentTask(null)\n    setTaskEdited('')\n    setShowEdit(false)\n    setCurrentFolder(null)\n  }\n\n  const handleRemoveFolder = (folder) => {\n\n    let validation = window.confirm('Are you sure you want to delete this folder?')\n\n    if (!validation) {\n      return\n    }\n\n    foldersService\n      .removeFolder(folder.idFolder)\n      .then((deletedFolder) => {\n        setAllFolders(allFolders.filter(f => f.idFolder !== folder.idFolder))\n      })\n  }\n\n  const handleChangeShowEdit = (task) => {\n    setCurrentTask(task)\n    setTaskEdited(task.taskName)\n    setShowEdit(!showEdit)\n  }\n\n  const handleChangeEditedTask = ({target}) => {\n    setTaskEdited(target.value)\n  }\n\n  const handleCancelEdit = () => {\n    setTaskEdited('')\n    setShowEdit(false)\n  }\n\n  const handleEdit = (e) => {\n    e.preventDefault()\n\n    if (taskEdited === '') {\n      callError('The edited task is empty')\n      return\n    }\n\n    const names = tasksToShow.map(t => t.taskName.toLowerCase())\n\n    let validation = true\n    if (names.indexOf(taskEdited.toLowerCase()) >= 0) {\n      validation = window.confirm('This task already exists, continue?')\n    }\n    \n    if (!validation) {\n      return\n    }\n\n    const updatedTask = {\n      content: taskEdited\n    }\n\n    tasksService\n      .updateTaskName(currentTask.idTask, updatedTask)\n      .then((taskUpdated) => {\n        setTasks(tasks.map(task => {\n          if (task.idTask === taskUpdated.idTask) {\n            return taskUpdated\n          }\n          return task\n        }))\n      })\n\n    setTaskEdited('')\n    setShowEdit(false)\n    setCurrentTask(null)\n  }\n\n  const handleChangeNewFolder = ({target}) => {\n    setNewFolder(target.value)\n    console.log(target.value)\n  }\n\n  const handleCreateFolder = (e) => {\n    e.preventDefault()\n\n    if (newFolder === '') {\n      callError('New folder\\'s name is empty')\n      return\n    }\n\n    const nFolder = {\n      name: newFolder\n    }\n\n    foldersService\n      .create(nFolder)\n      .then((data) => {\n        setAllFolders([...allFolders, data])\n      })\n    setNewFolder('')\n  }\n\n  const tasksToShow = (currentFolder)\n    ? tasks.filter(task => task.idFolder === currentFolder.idFolder)\n    : []\n  \n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"App-title\">\n          <h1 onClick={handleDisplayAllFolders}>To Do App</h1>\n        </div>\n        <div className=\"error-notification\">\n          <Notification message={errorMessage} />\n        </div>\n        <div className=\"directory\">\n          <span onClick={handleDisplayAllFolders}>Folders</span>\n          <span>\n            {\n              (currentFolder)\n                ? `> ${ currentFolder.name }`\n                : ''\n            }\n          </span>\n        </div>\n        <div className=\"work-zone\">\n          {\n            (currentFolder === null)\n              ? <div>\n                  <FolderList\n                    allFolders={allFolders}\n                    handleShowFolderTasks={handleShowFolderTasks}\n                    handleRemoveFolder={handleRemoveFolder}\n                  />\n                  <CreateFolderForm\n                    newFolder={newFolder}\n                    handleCreateFolder={handleCreateFolder}\n                    handleChangeNewFolder={handleChangeNewFolder}\n                  />\n                </div>\n              : (showEdit)\n                ? <EditForm\n                    handleEdit={handleEdit}\n                    handleChangeEditedTask={handleChangeEditedTask}\n                    taskEdited={taskEdited}\n                    handleCancelEdit={handleCancelEdit}\n                  />\n                : <TaskList\n                    tasks={tasksToShow}\n                    addNewTask={addNewTask}\n                    newTask={newTask}\n                    handleDoneChange={handleDoneChange}\n                    handleNewTaskChange={handleNewTaskChange}\n                    handleChangeShowEdit={handleChangeShowEdit}\n                    handleRemoveTask={handleRemoveTask}\n                  />\n          }\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './App.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}